@page "/process/{data}"

@using CheckinQrWeb.Components.Process;
@using CheckinQrWeb.Core
@using CheckinQrWeb.Core.Helpers
@using CheckinQrWeb.Core.Models
@using Newtonsoft.Json
@using System.IdentityModel.Tokens.Jwt

@inject ISnackbar _snackbar
@inject IHttpClientFactory _clientFactory;

@inject DccServicesHelper _dccServicesHelper;
@inject IDialogService _dialogService;

<MudGrid  class="mud-theme-primary rounded">
    <MudItem xs="3">
        <MudText Typo="Typo.h5">Service prodivder</MudText></MudItem>
    <MudItem xs="9">
        <MudText Typo="Typo.h5">@ServiceProvider</MudText></MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12">
        <MudAlert Severity="Severity.Info" Class="rounded-0">You have been redirected to this page by the service provider (airline, ticketing authority, etc) above. Please upload your QR code using a screenshot or scan it using your telephone to complete the procedure.</MudAlert>
    </MudItem>
</MudGrid>
<p>&nbsp;</p>
<p>&nbsp;</p>

@if (!string.IsNullOrWhiteSpace(ErrorDisplay))
{
        <MudGrid>
            <MudItem xs="12">
                <MudAlert Severity="Severity.Error" Class="rounded-0">@ErrorDisplay</MudAlert>
            </MudItem>
        </MudGrid>
}
@if (!string.IsNullOrWhiteSpace(WarningDisplay))
{
        <MudGrid>
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Class="rounded-0">@WarningDisplay</MudAlert>
            </MudItem>
        </MudGrid>
}

<MudGrid>
    <MudItem xs="12" md="4">
        <DccQrUploadComponent Disabled="@(ProcessIsFinished)" OnQRUploaded="ValidateDcc"></DccQrUploadComponent>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12">
        <QrValidationResultComponent QrValidationMessage="@QrValidationMessage" QrValidationSuccess="QrValidationSuccess"></QrValidationResultComponent>
    </MudItem>
</MudGrid>

<SimpleAudit Entries="@AuditEntries"></SimpleAudit>


@code {

    [Parameter]
    public string Data { get; set; }

    private string ServiceProvider { get; set; }
    private string ErrorDisplay { get; set; }
    private string WarningDisplay { get; set; }
    private List<AuditEntry> AuditEntries { get; set; } = new();
    private bool ProcessIsFinished { get; set; } = false;

    // Step 1: data from request
    private QrValidationRequestProcessingResult RequestProcessingResult { get; set; }
    // Step 2: 
    private ValidationServiceDescriptionData ValidationServiceDescriptionData { get; set; }
    // Step 3:    
    private string UserKey { get; set; }
    // Step 4:
    private ValidatorTokenResponse ValidatorTokenResponse { get; set; }
    //Step 5:
    private DccQrValidationRequest DccQrValidationRequest { get; set; }
    private bool? QrValidationSuccess { get; set; }
    private string QrValidationMessage { get; set; }

    protected override void OnInitialized()
    {
        // Step 1: process incoming data
        try
        {
            var jsonData = Data.DecodeBase64();
            RequestProcessingResult = _dccServicesHelper.ProcessStartDccValidationRequest(jsonData);

            ServiceProvider = RequestProcessingResult.QrValidationRequest.ServiceProvider;
            AddAuditEntry("Step 1: Read Incomming data", RequestProcessingResult);
        }
        catch (Exception e)
        {
            ServiceProvider = "Error getting service provider from request.";
            HandleError(e.Message);
        }
    }

    private async Task ValidateDcc(string dccQrData)
    {
        WarningDisplay = "";

        try
        {
            bool? result = await _dialogService.ShowMessageBox(
                "Continue?",
                RequestProcessingResult.QrValidationRequest.Consent,
                yesText: "Continue", cancelText: "Cancel");
            if (result == null)
            {
                return;
            }

            if (!dccQrData.IsValidDccJson())
            {
                ShowWarning("Invalid DCC QR code");
                return;
            }
            AddAuditEntry("Step 2: Uploaded QR Data starts with: ", dccQrData.Substring(0,10));

            // Step 3: Get services information
            ValidationServiceDescriptionData = await _dccServicesHelper.GetValidationServiceDescriptionData(
                new ValidationServiceDescriptionDataRequest
                    {
                        VerificationServiceIdentity = RequestProcessingResult.QrValidationRequest.ServiceIdentity
                    });
            AddAuditEntry("Step 3: Get Services information", ValidationServiceDescriptionData);

            // Step 4: set the public key
            AddAuditEntry("Step 4: Generate keypair for signature. Public UserKey:", RequestProcessingResult.PublicKey);

            // Step 5: Get validation service signing request information
            ValidatorTokenResponse = await _dccServicesHelper.GetValidatorToken(new GetValidatorTokenRequest
                {
                    AccessTokenServiceEndpoint = ValidationServiceDescriptionData.AccessTokenService1.serviceEndpoint,
                    QrValidationRequestJwtToken = RequestProcessingResult.QrValidationRequest.Token,
                    UserKey = RequestProcessingResult.PublicKey,
                    ValidationServiceEndpoint = ValidationServiceDescriptionData.ValidationService1.id
                });
            AddAuditEntry("Step 5: Get the signing request instructions from validator", ValidatorTokenResponse);

            // Step 6: Combine with uploaded Dcc QR code to create and execute validation request
            DccQrValidationRequest = new DccQrValidationRequest
                {
                    JwtSecurityToken = RequestProcessingResult.JwtIssToken,
                    UserKey = RequestProcessingResult.PublicKey,
                    ValidationNonce = ValidatorTokenResponse.ValidationNonce,
                    DccQrData = dccQrData,
                    PublicKeyJwk = ValidationServiceDescriptionData.PublicKeyJwk,
                    ValidatorAccessToken = ValidatorTokenResponse.AccessToken,
                    ValidatorAccessTokenRaw = ValidatorTokenResponse.AccessTokenRaw,
                    PrivateSigningKey = RequestProcessingResult.PrivateKey,
                    PublicSigningKey = RequestProcessingResult.PublicKey
                };

            var dccCheckResponse = await _dccServicesHelper.SubmitDccQrValidationRequest(DccQrValidationRequest);

            // set uploaded qr data to null
            DccQrValidationRequest = null;
            dccQrData = null;

            AddAuditEntry("Step 6: Process uploaded QR. Display DCC check response", dccCheckResponse);
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(dccCheckResponse.Content);
            AddAuditEntry("Step 7: Show QR result", jsonToken);

            if (jsonToken == null)
            {
                QrValidationSuccess = false;
                HandleError("No valid QR code uploaded. Unexpected response received from validation services.");
                return;
            }
            var tokenResult = _dccServicesHelper.AnalyseDccJsonToken(jsonToken);

            QrValidationSuccess = tokenResult.IsValid;
            ProcessIsFinished = true;

            if (!tokenResult.IsValid)
            {
                QrValidationMessage = string.Join("; ", tokenResult.Errors);
                AddAuditEntry("Step 8: Analyse QR result", tokenResult);
            }

        }
        catch (Exception e)
        {
            ProcessIsFinished = true;
            HandleError(e.Message);
        }
    }

    private void HandleError(string error)
    {
        ErrorDisplay = error;
        InvokeAsync(StateHasChanged);

        _snackbar.Add("Something went wrong!", Severity.Error);
    }

    private void ShowWarning(string warning)
    {
        WarningDisplay = warning;
    }

    private void AddAuditEntry(string title, object data)
    {
        var message = JsonConvert.SerializeObject(data, Formatting.Indented);
        AuditEntries.Add(new AuditEntry
            {
                Label = title,
                Message = message
            });
    }
}